// Generated by CoffeeScript 1.6.2
(function() {
  var Toolbar, newBrushPizza, newPaintPizza;

  document.onselectstart = function() {
    return false;
  };

  newBrushPizza = function(stage) {
    var center, circle, layer;

    layer = new Kinetic.Layer({
      id: "background"
    });
    circle = new Kinetic.Circle({
      x: stage.getWidth() / 2,
      y: stage.getHeight() / 2,
      radius: 235,
      fill: "white",
      stroke: "black",
      strokeWidth: 4
    });
    center = new Kinetic.Circle({
      x: stage.getWidth() / 2,
      y: stage.getHeight() / 2,
      radius: 2,
      fill: "white",
      stroke: "black",
      strokeWidth: 3
    });
    layer.add(circle);
    layer.add(center);
    return layer;
  };

  newPaintPizza = function(stage) {
    var R, angle, angleText, cx, cy, days, i, layer, text, _i;

    layer = new Kinetic.Layer({
      id: "background"
    });
    days = ['周日', '周一', '周二', '周三', '周四', '周五', '周六'];
    cx = stage.getWidth() / 2;
    cy = stage.getHeight() / 2;
    R = 235;
    for (i = _i = 0; _i <= 6; i = ++_i) {
      angle = i * (360 / 7);
      angleText = angle + 5;
      layer.add(new Kinetic.Wedge({
        x: cx,
        y: cy,
        radius: R,
        angleDeg: 360 / 7,
        stroke: "black",
        strokeWidth: 4,
        rotationDeg: angle
      }));
      text = new Kinetic.Text({
        x: cx + (R - 15 - 12) * Math.sin((angle + 5) / 180 * Math.PI),
        y: cy + (R - 15 - 24) * Math.cos((angle + 5) / 180 * Math.PI),
        text: days[6 - i],
        fill: "black",
        fontSize: 22,
        rotationDeg: 360 - angle - 10
      });
      console.log(days[i]);
      console.log(text.getHeight());
      console.log(text.getWidth());
      layer.add(text);
    }
    return layer;
  };

  Toolbar = (function() {
    function Toolbar(options) {
      this.$container = options.$container, this.stage = options.stage, this.background = options.background, this.color = options.color, this.fontSize = options.fontSize, this.strokeWidth = options.strokeWidth;
      this.currentTool = '';
      this.brushing = false;
      this.brushPoint = null;
      this.textPoint = null;
      this.setUpColorGroup();
      this.events = {};
      this.setUpEvents();
      this.setUpLayers();
    }

    Toolbar.prototype.on = function(evt, callback) {
      if (!(evt in this.events)) {
        this.events[evt] = [];
      }
      this.events[evt].push(callback);
      return this["this"];
    };

    Toolbar.prototype.trigger = function(evt) {
      var callback;

      return [
        (function() {
          var _i, _len, _ref, _results;

          _ref = this.events[evt];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            callback = _ref[_i];
            _results.push(callback());
          }
          return _results;
        }).call(this)
      ];
    };

    Toolbar.prototype.setUpLayers = function() {
      this.stage.add(this.background);
      this.stage.add(new Kinetic.Layer({
        id: "brushLayer"
      }));
      this.stage.add(new Kinetic.Layer({
        id: "paintLayer"
      }));
      return this.stage.add(new Kinetic.Layer({
        id: "textLayer"
      }));
    };

    Toolbar.prototype.setUpColorGroup = function() {
      var colors;

      colors = ["1c39f6", "ff43f7", "61fbb1", "d31710", "00306f", "0086c7", "884aaa", "ff7a29", "fefa51", "00ba6d", "00bfef", "ff1f17", "000", "fff"].reverse();
      return $.each(colors, function() {
        var btn;

        btn = "<button class=\"color btn\" data-color=\"#" + this + "\" style=\"background: #" + this + ";\"></button>";
        return $(".toolbar .color-group").append(btn);
      });
    };

    Toolbar.prototype.setUpEvents = function() {
      var container, ctrl, func, self, _, _ref, _results,
        _this = this;

      container = this.stage.getContainer();
      container.addEventListener("mousedown", function() {
        if (_this.currentTool === "brush") {
          _this.brushing = true;
        }
        return _this.debug('container-mousedown');
      });
      container.addEventListener("mouseup", function() {
        _this.brushing = false;
        return _this.debug('container-mouseup');
      });
      this.stage.on("mousemove", function() {
        var p;

        p = _this.stage.getMousePosition();
        if (_this.currentTool === "brush" && _this.brushing && _this.brushPoint) {
          _this.brush(p);
        }
        return _this.brushPoint = p;
      }).on("mousedown", function(evt) {
        if (_this.currentTool === "text") {
          _this.textPoint = _this.stage.getMousePosition();
          return _this.trigger("textstart");
        }
      });
      $('.save-btn').button();
      _ref = this.clickEvents;
      _results = [];
      for (ctrl in _ref) {
        func = _ref[ctrl];
        console.log("" + ctrl + " -> " + func);
        self = this;
        _ = function(c, f) {
          return $('.toolbar').find(c).click(function(evt) {
            return self[f](evt);
          });
        };
        _results.push(_(ctrl, func));
      }
      return _results;
    };

    Toolbar.prototype.clickEvents = {
      ".reset-btn": "resetLayer",
      ".text-btn": "textTool",
      ".brush-btn": "brushTool",
      ".size-group button": "changeSize",
      ".color-group button": "changeColor",
      ".save-btn": "saveImage"
    };

    Toolbar.prototype.resetLayer = function(layerName) {
      return this.stage.get(layerName)[0].clear();
    };

    Toolbar.prototype.use = function(nextTool) {
      if (this.currentTool) {
        this.$container.removeClass(this.currentTool);
      }
      this.currentTool = nextTool;
      this.$container.addClass(this.currentTool);
      return this.debug();
    };

    Toolbar.prototype.textTool = function() {
      return this.use('text');
    };

    Toolbar.prototype.text = function(txt) {
      var text;

      text = new Kinetic.Text({
        x: this.textPoint.x,
        y: this.textPoint.y,
        text: txt,
        fill: this.color,
        fontSize: this.fontSize
      });
      return this.stage.get('#textLayer')[0].add(text).draw();
    };

    Toolbar.prototype.brushTool = function() {
      return this.use('brush');
    };

    Toolbar.prototype.brush = function(p) {
      var line;

      console.log(this.strokeWidth);
      console.log(this.brushPoint);
      console.log(p);
      line = new Kinetic.Line({
        points: [this.brushPoint.x, this.brushPoint.y, p.x, p.y],
        stroke: this.color,
        lineCap: 'round',
        lineJoin: 'round',
        strokeWidth: this.strokeWidth
      });
      return this.stage.get('#brushLayer')[0].add(line).draw();
    };

    Toolbar.prototype.paintTool = function() {
      return this.use('paint');
    };

    Toolbar.prototype.changeSize = function(evt) {
      var size;

      size = $(evt.target);
      this.fontSize = size.attr('data-font-size');
      return this.strokeWidth = size.attr('data-stroke-width');
    };

    Toolbar.prototype.changeColor = function(evt) {
      var color;

      color = $(evt.target);
      return this.color = color.attr("data-color");
    };

    Toolbar.prototype.saveImage = function(evt) {
      var save,
        _this = this;

      save = $('.save-btn');
      save.button('loading');
      return this.stage.toDataURL({
        callback: function(url) {
          $('.download-btn').attr('href', url).attr('download', "" + window.document.title + ".png").show();
          return save.button('reset');
        },
        mimeType: "image/png"
      });
    };

    Toolbar.prototype.debug = function(at) {
      if (at == null) {
        at = null;
      }
      return console.log("@" + at + ": tool: " + this.currentTool + ", brushing: " + this.brushing + " with color " + this.color);
    };

    return Toolbar;

  })();

  $(function() {
    var dialog, drawText, pizza, stage, toolbar, userInput;

    drawText = function(i) {
      var txt;

      this.i = i;
      txt = this.i.val();
      if (txt.trim()) {
        return toolbar.text(txt);
      }
    };
    stage = new Kinetic.Stage({
      container: "pizza",
      fill: "white",
      width: 1000,
      height: 500
    });
    pizza = newPaintPizza(stage);
    toolbar = new Toolbar({
      $container: $('#pizza'),
      stage: stage,
      background: pizza,
      color: "black",
      fontSize: 25,
      strokeWidth: 6
    });
    dialog = $('#text-dialog').on('shown', function() {
      userInput.val('');
      return userInput.focus();
    });
    userInput = $('#user-input');
    dialog.find('.save').click(function() {
      return drawText(userInput);
    });
    userInput.parent().submit(function(evt) {
      evt.preventDefault();
      drawText(userInput);
      return dialog.modal('hide');
    });
    return toolbar.on("textstart", function() {
      return dialog.modal('show');
    });
  });

}).call(this);
